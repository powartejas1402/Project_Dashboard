{"version":3,"sources":["logo.svg","App.js","Form.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","Form","useState","firstname","lastname","empid","msg","data","setData","InputEvent","event","target","name","value","preValue","style","margin","textAlign","onSubmit","e","preventDefault","alert","className","for","type","id","onChange","placeholder","required","border","accept","rows","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,oKCyB5BC,I,qBC2CAC,G,MAjEF,WAET,IAFe,EAOSC,mBAAS,CAC7BC,UAAY,GACZC,SAAW,GACXC,MAAQ,GACRC,IAAM,KAXK,mBAORC,EAPQ,KAOFC,EAPE,KAcTC,EAAa,SAACC,GAAW,IAAD,EACJA,EAAMC,OAArBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MACbL,GAAQ,SAACM,GACL,OAAO,2BACAA,GADP,kBAEKF,EAAQC,QAUrB,OACI,oCACI,wBAAIE,MA7BK,CACbC,OAAQ,OACRC,UAAW,WA2BP,yBACA,0BAAMC,SARK,SAACC,GAChBA,EAAEC,iBACFC,MAAM,eAAD,OAAgBd,EAAKJ,UAArB,wBAA8CI,EAAKH,SAAnD,yBAA4EG,EAAKF,MAAjF,sBAAoGE,EAAKD,QAOtG,yBAAKgB,UAAU,aACX,yBAAKA,UAAU,QACX,2BAAOC,IAAI,YAAYD,UAAU,cAAjC,cACA,2BAAOE,KAAK,OAAOF,UAAU,eAAeG,GAAG,YAAYb,KAAK,YAAYc,SAAUjB,EAAYI,MAAON,EAAKJ,UAAWwB,YAAY,wBAAwBC,UAAQ,KAEzK,yBAAKN,UAAU,QACX,2BAAOC,IAAI,WAAWD,UAAU,cAAhC,aACA,2BAAOE,KAAK,OAAOF,UAAU,eAAeG,GAAG,WAAWb,KAAK,WAAWc,SAAUjB,EAAYI,MAAON,EAAKH,SAAUuB,YAAY,uBAAuBC,UAAQ,KAErK,yBAAKN,UAAU,QACX,2BAAOC,IAAI,aAAaD,UAAU,cAAlC,eACA,2BAAOE,KAAK,SAASF,UAAU,eAAeG,GAAG,aAAab,KAAK,QAAQc,SAAUjB,EAAYI,MAAON,EAAKF,MAAOsB,YAAY,yBAAyBC,UAAQ,KAErK,yBAAKb,MAAS,CAACc,OAAS,QACpB,2BAAON,IAAI,aAAaD,UAAU,cAAlC,iDACA,6BACA,2BAAOE,KAAK,OAAOC,GAAG,aAAaK,OAAO,yBAAyBF,UAAQ,KAE/E,6BACA,yBAAKN,UAAU,QACX,2BAAOC,IAAI,8BAA8BD,UAAU,cAAnD,gBACA,8BAAUA,UAAU,eAAeG,GAAG,8BAA8Bb,KAAK,MAAMc,SAAUjB,EAAYI,MAAON,EAAKD,IAAKqB,YAAY,wBAAwBI,KAAK,OAEnK,yBAAKC,MAAM,UACP,4BAAQA,MAAM,kBAAkBR,KAAK,UAArC,qBChDJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b22d589.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState} from 'react';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Form = () => {\r\n\r\n    var style_form = {\r\n        margin: 'auto',\r\n        textAlign: 'center',\r\n    };\r\n\r\n    const [data, setData] = useState({\r\n        firstname : '',\r\n        lastname : '',\r\n        empid : '',\r\n        msg : '',\r\n    });\r\n\r\n    const InputEvent = (event) => {\r\n        const {name, value} = event.target;\r\n        setData((preValue) => {\r\n            return {\r\n                ...preValue,\r\n                [name] : value, \r\n            };\r\n        });\r\n    };\r\n\r\n    const formSubmit = (e) => {\r\n        e.preventDefault();\r\n        alert(`First-Name: ${data.firstname}, Last-name: ${data.lastname}, EmployeeID: ${data.empid}, Message: ${data.msg}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 style={style_form}> Send us your Files! </h1>\r\n            <form onSubmit={formSubmit}>\r\n                <div className=\"col-6 p-5\">\r\n                    <div className=\"mb-3\">\r\n                        <label for=\"firstname\" className=\"form-label\">First Name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"firstname\" name=\"firstname\" onChange={InputEvent} value={data.firstname} placeholder=\"Enter your first name\" required />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label for=\"lastname\" className=\"form-label\">Last Name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"lastname\" name=\"lastname\" onChange={InputEvent} value={data.lastname} placeholder=\"Enter your last name\" required />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label for=\"employeeid\" className=\"form-label\">Employee ID</label>\r\n                        <input type=\"number\" className=\"form-control\" id=\"employeeid\" name=\"empid\" onChange={InputEvent} value={data.empid} placeholder=\"Enter your Employee ID\" required />\r\n                    </div>\r\n                    <div style = {{border : '0px'}}>\r\n                        <label for=\"selectfile\" className=\"form-label\">Upload your files in (.doc, .jpg, .pdf, .mp4)</label>\r\n                        <br />\r\n                        <input type=\"file\" id=\"selectfile\" accept=\".pdf, .jpg, .doc, .mp4\" required/>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"mb-3\">\r\n                        <label for=\"exampleFormControlTextarea1\" className=\"form-label\">Any message?</label>\r\n                        <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" name=\"msg\" onChange={InputEvent} value={data.msg} placeholder=\"Enter your message...\" rows=\"3\"></textarea>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <button class=\"btn btn-primary\" type=\"submit\">Submit form</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Form from './Form';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <Form />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}